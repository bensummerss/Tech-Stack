@using techstack.team.builder.blazor.web.Models;

<MudGrid>
    <MudItem xs="3">
        <MudAutocomplete T="string"
                         SearchFunc="@Search2"
                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                         Label="Role"
                         Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"
                         Clearable="true"
                         Dense="true" />
    </MudItem>
    <MudItem xs="3">
        <MudAutocomplete 
            T="string"
            SearchFunc="@Search1"
            ResetValueOnEmptyText="@resetValueOnEmptyText" 
            Label="Skillset" 
            Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"
            Clearable="true"
            Dense="true" />
    </MudItem>
    <MudItem xs="3">
        <MudSelect Clearable="true" Dense="true" T="string" Label="Skill level" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
            @foreach (var skillLevel in this.skillLevels)
            {
                <MudSelectItem T="string" Value="@skillLevel">@skillLevel</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="3">
        <MudSelect Clearable="true" Dense="true" T="int" Label="Quantity" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
            @foreach (var quantityRole in this.quantityRoles)
            {
                <MudSelectItem T="int" Value="@quantityRole">@quantityRole</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
</MudGrid>


@code {
    private bool resetValueOnEmptyText;

    private async Task<IEnumerable<string>> Search1(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return this.skillsets;
        return this.skillsets.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> Search2(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return this.roles;
        return this.roles.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private string[] skillsets =
       {
        "Angular", "Angular.js", "Apache", "ASP.NET", "Azure", "AWS", "ASP.NET MVC", "Blazor", "C#", "C++",
        "CSS", "HTML", "Java", "Javascript", "Machine learning", "Python",
        "ReactJS", "RXJS", "Ruby",
        "Ruby on rails", "SASS", "Svelte", "Typescript",
    };

    private string[] roles =
    {
        "Software Engineer", "Front-End Software Engineer", "Back-End Software Engineer", "Mobile Developer", "Infrastructure Engineer", "Platform Engineer", "Web Developer", "Full Stack Engineer", "Business Analyst", "QA Engineer",
        "Delviery Manager", "Product Manager", "Product Owner", "Product Designer", "UX designer", "UX/UI Designer",
        "UX Researcher", "UI Developer", "UI Designer",
        "Project Manager", "Site Reliability Engineer", "Data Engineer", "Data Analyst",
        "Database Admin", "Release Manager", "Operations Management", "Solution Architect"
    };

    private string[] skillLevels =
    {
        "Executive", "Director", "Lead", "Senior", "Graduate", "Apprentice", "Intern",
    };

    private int[] quantityRoles =
    {
        1, 2, 3, 4, 5, 6,7,8,9
    };

}