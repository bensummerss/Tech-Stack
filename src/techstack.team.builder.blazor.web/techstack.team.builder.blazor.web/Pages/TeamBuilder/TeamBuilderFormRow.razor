@using techstack.team.builder.blazor.web.Models;

<MudGrid>
    <MudItem xs="3">
        <MudAutocomplete T="string"
                         SearchFunc="@Search2"
                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                         Label="Role"
                         Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"
                         Dense="true" />
    </MudItem>
    <MudItem xs="3">
        <MudAutocomplete 
            T="string"
            SearchFunc="@Search1"
            ResetValueOnEmptyText="@resetValueOnEmptyText" 
            Label="Skillset" 
            Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"
            Dense="true" />
    </MudItem>
    <MudItem xs="3">
        <MudSelect Clearable="true" Dense="true" T="SkillLevel" Label="Skill level" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@(new SkillLevel("Executive"))" />
            <MudSelectItem Value="@(new SkillLevel("Lead"))" />
            <MudSelectItem Value="@(new SkillLevel("Senior"))" />
            <MudSelectItem Value="@(new SkillLevel("Mid-level"))" />
            <MudSelectItem Value="@(new SkillLevel("Graduate"))" />
            <MudSelectItem Value="@(new SkillLevel("Apprentice"))" />
            <MudSelectItem Value="@(new SkillLevel("Intern"))" />
        </MudSelect>
    </MudItem>
    <MudItem xs="3">
        <MudSelect Clearable="true" Dense="true" T="double" Label="Quantity" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem T="double" Value="1" />
            <MudSelectItem T="double" Value="2" />
            <MudSelectItem T="double" Value="3" />
            <MudSelectItem T="double" Value="4" />
            <MudSelectItem T="double" Value="5" />
            <MudSelectItem T="double" Value="6" />
            <MudSelectItem T="double" Value="7" />
            <MudSelectItem T="double" Value="8" />
            <MudSelectItem T="double" Value="9" />
        </MudSelect>
    </MudItem>
</MudGrid>


@code {
    private bool resetValueOnEmptyText;

    private async Task<IEnumerable<string>> Search1(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return skillsets;
        return skillsets.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> Search2(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return roles;
        return roles.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    public class Role
    {
        public Role(string name)
        {
            Name = name;
        }

        public readonly string Name;

        public override bool Equals(object o)
        {
            var other = o as Role;
            return other?.Name == Name;
        }

        public override int GetHashCode() => Name?.GetHashCode() ?? 0;

        public override string ToString() => Name;
    }

    public class Skillset
    {
        public Skillset(string name)
        {
            Name = name;
        }

        public readonly string Name;

        public override bool Equals(object o)
        {
            var other = o as Skillset;
            return other?.Name == Name;
        }

        public override int GetHashCode() => Name?.GetHashCode() ?? 0;

        public override string ToString() => Name;
    }

    private string[] skillsets =
       {
        "Angular", "Angular.js", "Apache", "ASP.NET", "Azure", "AWS", "ASP.NET MVC", "Blazor", "C#", "C++",
        "CSS", "HTML", "Java", "Javascript", "Machine learning", "Python",
        "ReactJS", "RXJS", "Ruby",
        "Ruby on rails", "SASS", "Svelte", "Typescript",
    };

    private string[] roles =
    {
        "Software Engineer", "Front-End Software Engineer", "Back-End Software Engineer", "Mobile Developer", "Infrastructure Engineer", "Platform Engineer", "Web Developer", "Full Stack Engineer", "Business Analyst", "QA Engineer",
        "Delviery Manager", "Product Manager", "Product Owner", "Product Designer", "UX designer", "UX/UI Designer",
        "UX Researcher", "UI Developer", "UI Designer",
        "Project Manager", "Site Reliability Engineer", "Data Engineer", "Data Analyst",
        "Database Admin", "Release Manager", "Operations Management", "Solution Architect"
    };

    public class SkillLevel
    {
        public SkillLevel(string name)
        {
            Name = name;
        }

        public readonly string Name;

        public override bool Equals(object o)
        {
            var other = o as SkillLevel;
            return other?.Name == Name;
        }

        public override int GetHashCode() => Name?.GetHashCode() ?? 0;

        public override string ToString() => Name;
    }
}