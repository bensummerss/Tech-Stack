@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<div class="title-button-row">
    <h3>Team request</h3>
    <MudIconButton OnClick="AddFormRow" DisableElevation="true" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.Add"></MudIconButton>
</div>

<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
    <MudGrid>
        @foreach (var fragment in dynamicComponents)
        {
            @fragment
        }
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>form.Validate())"><p>Submit</p></MudButton>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    //private RenderFragment dynamicComponent;

    private List<RenderFragment> dynamicComponents = new List<RenderFragment>();

    private void AddFormRow()
    {
        dynamicComponents.Add(builder =>
        {
            builder.OpenComponent(0, typeof(TeamBuilderFormRow));
            builder.CloseComponent();
        });
    }
}