@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Rendering;
@using techstack.team.builder.blazor.web.Models;

<MudGrid>
    <MudItem xs="12">
        <div class="title-button-row-0m">
            <h3>Team request</h3>
            <div class="icon-only-row">
                <MudIconButton OnClick="AddFormRow"
                               DisableElevation="true"
                               Variant="Variant.Filled"
                               Size="Size.Small"
                               Color="Color.Primary"
                               Icon="@Icons.Material.Filled.Add" />
                @if (formRow.Count > 0)
                {
                    <MudButton OnClick="RemoveAllFormRows"
                               DisableElevation="true"
                               Variant="Variant.Filled"
                               Size="Size.Small"
                               Color="Color.Error"
                               Style="margin-left: 8px;">
                        <MudText>Remove all</MudText>
                    </MudButton>
                }
            </div>
        </div>
    </MudItem>
    @if (formRow.Count > 0)
    {
        <MudItem xs="12">
            <MudForm Model="@form" @ref="formRef">
                    @foreach (var (row, index) in formRow.Select((f, i) => (f, i)))
                    {
                        <div class="rendered-row">
                            <MudIconButton @onclick="() => RemoveFormRow(index)"
                                            DisableElevation="true"
                                            Variant="Variant.Text"
                                            Size="Size.Small"
                                            Color="Color.Error"
                                            Icon="@Icons.Material.Filled.RemoveCircleOutline" />
                            @row
                        </div>
                    }
            </MudForm>
        </MudItem>
        <MudItem xs="12">
            <MudCardActions>
                <div class="button-row">
                @if (formRef != null)
                    {
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" DisableElevation="true" OnClick="@( ()=> formRef.Reset())" ButtonType="ButtonType.Reset">
                            <MudText Typo="Typo.body2">Clear fields</MudText>
                        </MudButton>
                    }
                </div>
            </MudCardActions>
        </MudItem>
    }
</MudGrid>

@code {
    bool success;
    FormModel form = new FormModel();
    MudForm formRef;
    private List<RenderFragment> formRow = new List<RenderFragment>();

    private void AddFormRow()
    {
        formRow.Add(builder =>
        {
            builder.OpenComponent(0, typeof(TeamBuilderFormRow));
            builder.CloseComponent();
        });
    }

    private void RemoveAllFormRows()
    {
        formRow.Clear();
        StateHasChanged();
    }

    private void RemoveFormRow(int index)
    {
        formRef.Reset();
        formRow.RemoveAt(index);
        StateHasChanged();
    }

    private void OnValidSubmit(EditContext context)
    {
        foreach (var teamBuilderFormItem in form.TeamBuilderFormItems)
        {
            var selectedValue = teamBuilderFormItem.SelectedValues;
        }

        success = true;
        StateHasChanged();
    }
}