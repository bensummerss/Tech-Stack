@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<MudGrid>
    <MudItem xs="12">
        <div class="title-button-row-0m">
            <h3>Team request</h3>
            <div class="icon-only-row">
                <MudIconButton OnClick="AddFormRow"
                               DisableElevation="true"
                               Variant="Variant.Filled"
                               Size="Size.Small"
                               Color="Color.Primary"
                               Icon="@Icons.Material.Filled.Add" />
            </div>
        </div>
    </MudItem>
    @if (dynamicComponents.Count > 0)
    {
        <MudItem xs="12">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudGrid>
                    @foreach (var (rowFragment, index) in dynamicComponents.Select((f, i) => (f, i)))
                    {
                        <div class="rendered-row">
                            <MudIconButton @onclick="() => RemoveFormRow(index)"
                                           DisableElevation="true"
                                           Variant="Variant.Text"
                                           Size="Size.Small"
                                           Color="Color.Error"
                                           Icon="@Icons.Material.Filled.RemoveCircleOutline"
                                           Style="margin-left: 5px;" />
                            @rowFragment
                        </div>
                    }
                </MudGrid>
            </MudForm>
        </MudItem>
        <MudItem xs="12">
            <div class="button-row">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(() => form.Validate())">
                    <MudText Typo="Typo.body2">Create post</MudText>
                </MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" DisableElevation="true" OnClick="@(() => form.Reset())">
                    <MudText Typo="Typo.body2">Clear</MudText>
                </MudButton>
            </div>
        </MudItem>
    }
</MudGrid>

@code {
    private List<string> dynamicComponentsContent = new List<string>();

    private List<RenderFragment> dynamicComponents = new List<RenderFragment>();

    private void AddFormRow()
    {
        dynamicComponents.Add(builder =>
        {
            builder.OpenComponent(0, typeof(TeamBuilderFormRow));
            builder.CloseComponent();
        });
    }

    private void RemoveFormRow(int index)
    {
        dynamicComponents.RemoveAt(index);
    }
}